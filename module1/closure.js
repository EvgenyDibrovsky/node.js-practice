// **** Замыкание (Closure) - это функция, которая запоминает свою лексическую среду выполнения (lexical environment) во время определения и имеет доступ к переменным этой среды, даже если она вызывается вне этой среды.

// При создании замыкания функция запоминает все переменные из внешней среды, к которым она имеет доступ, и сохраняет их в специальной внутренней структуре данных, называемой замыканием. Замыкание позволяет использовать эти переменные внутри функции, даже если они не передаются как аргументы.

// Вот пример использования замыкания:****

function createCounter() {
  let count = 0;
  return function () {
    count++;
    console.log(count);
  };
}

const counter = createCounter();
counter(); // Вывод: 1
counter(); // Вывод: 2
counter(); // Вывод: 3

// ****Рекурсия - это процесс, при котором функция вызывает сама себя. Когда функция вызывает сама себя, она создает новый экземпляр себя, который работает независимо от предыдущего вызова.

// Рекурсия может использоваться для решения задач, которые могут быть разбиты на более мелкие подзадачи. Каждый новый вызов функции решает меньшую подзадачу, пока не будет достигнуто базовое условие, при котором рекурсия прекращается и функция возвращает результат.

// Рекурсия может быть реализована в любом языке программирования, в том числе и в JavaScript. Вот пример функции, реализующей рекурсию для вычисления факториала числа:

// javascript
// ****

function factorial(n) {
  if (n === 0) {
    // базовое условие
    return 1;
  } else {
    // рекурсивный случай
    return n * factorial(n - 1);
  }
}

console.log(factorial(5)); // Вывод: 120
